--- samba-3.5.0/source3/lib/recvfile.c.orig	2013-01-29 17:52:38.000000000 +0800
+++ samba-3.5.0/source3/lib/recvfile.c	2013-03-19 21:29:12.168669071 +0800
@@ -29,10 +29,16 @@
  * It's safe to make direct syscalls to lseek/write here
  * as we're below the Samba vfs layer.
  *
+ * If tofd is -1 we just drain the incoming socket of count
+ * bytes without writing to the outgoing fd.
+ * If a write fails we do the same (to cope with disk full)
+ * errors.
+ *
  * Returns -1 on short reads from fromfd (read error)
  * and sets errno.
  *
  * Returns number of bytes written to 'tofd'
+ * or thrown away if 'tofd == -1'.
  * return != count then sets errno.
  * Returns count if complete success.
  */
@@ -89,26 +95,23 @@
 
 		num_written = 0;
 
-		/* Don't write any more after a write error. */
-		while (tofd != -1 && (num_written < read_ret)) {
+		while (num_written < read_ret) {
 			ssize_t write_ret;
 
-			/* Write to file - ignore EINTR. */
-			write_ret = sys_write(tofd,
-					buffer + num_written,
-					read_ret - num_written);
-
-			if (write_ret <= 0) {
-				/* write error - stop writing. */
-				tofd = -1;
-                                if (total_written == 0) {
-					/* Ensure we return
-					   -1 if the first
-					   write failed. */
-                                        total_written = -1;
-                                }
-				saved_errno = errno;
-				break;
+			if (tofd == -1) {
+				write_ret = read_ret;
+			} else {
+				/* Write to file - ignore EINTR. */
+				write_ret = sys_write(tofd,
+						buffer + num_written,
+						read_ret - num_written);
+
+				if (write_ret <= 0) {
+					/* write error - stop writing. */
+					tofd = -1;
+					saved_errno = errno;
+					continue;
+				}
 			}
 
 			num_written += (size_t)write_ret;
@@ -126,24 +129,13 @@
 	return (ssize_t)total_written;
 }
 
-#if defined(HAVE_LINUX_SPLICE)
-
-/*
- * Try and use the Linux system call to do this.
- * Remember we only return -1 if the socket read
- * failed. Else we return the number of bytes
- * actually written. We always read count bytes
- * from the network in the case of return != -1.
- */
-
-
 ssize_t sys_recvfile(int fromfd,
 			int tofd,
 			SMB_OFF_T offset,
 			size_t count)
 {
 	static int pipefd[2] = { -1, -1 };
-	static bool try_splice_call = false;
+	static bool try_splice_call = true;
 	size_t total_written = 0;
 	loff_t splice_offset = offset;
 
@@ -210,9 +202,10 @@
 	}
 
  done:
-	if (count) {
+	if (total_written < count) {
 		int saved_errno = errno;
-		if (drain_socket(fromfd, count) != count) {
+		if (drain_socket(fromfd, count-total_written) !=
+				count-total_written) {
 			/* socket is dead. */
 			return -1;
 		}
@@ -221,55 +214,12 @@
 
 	return total_written;
 }
-#else
-
-/*****************************************************************
- No recvfile system call - use the default 128 chunk implementation.
-*****************************************************************/
-
-ssize_t sys_recvfile(int fromfd,
-			int tofd,
-			SMB_OFF_T offset,
-			size_t count)
-{
-	return default_sys_recvfile(fromfd, tofd, offset, count);
-}
-#endif
 
 /*****************************************************************
  Throw away "count" bytes from the client socket.
- Returns count or -1 on error.
 *****************************************************************/
 
 ssize_t drain_socket(int sockfd, size_t count)
 {
-	size_t total = 0;
-	size_t bufsize = MIN(TRANSFER_BUF_SIZE,count);
-	char *buffer = NULL;
-
-	if (count == 0) {
-		return 0;
-	}
-
-	buffer = SMB_MALLOC_ARRAY(char, bufsize);
-	if (buffer == NULL) {
-		return -1;
-	}
-
-	while (total < count) {
-		ssize_t read_ret;
-		size_t toread = MIN(bufsize,count - total);
-
-		/* Read from socket - ignore EINTR. */
-		read_ret = sys_read(sockfd, buffer, toread);
-		if (read_ret <= 0) {
-			/* EOF or socket error. */
-			free(buffer);
-			return -1;
-		}
-		total += read_ret;
-	}
-
-	free(buffer);
-	return count;
+	return default_sys_recvfile(sockfd, -1, (SMB_OFF_T)-1, count);
 }
